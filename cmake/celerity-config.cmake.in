cmake_minimum_required(VERSION 3.13)
include(CMakeFindDependencyMacro)

set(CELERITY_INSTALL_LOCATION "@CELERITY_INSTALL_LOCATION@")
set(CELERITY_SYCL_IMPL "@CELERITY_SYCL_IMPL@")

set(CELERITY_CMAKE_DIR "${CELERITY_INSTALL_LOCATION}/lib/cmake/Celerity")
set(CELERITY_RUNTIME_LIBRARY Celerity::celerity_runtime)
set(CELERITY_DPCPP_TARGETS "@CELERITY_DPCPP_TARGETS@")
include("${CELERITY_CMAKE_DIR}/AddToTarget.cmake")

set(CELERITY_ORIGINAL_CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH}")
set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH}" "${CELERITY_CMAKE_DIR}")

if(NOT DEFINED MPI_HOME AND NOT "@MPI_HOME@" STREQUAL "")
  # FindMPI does not export anything akin to "MPI_DIR" that can be fed back into find_dependency.
  set(MPI_HOME "@MPI_HOME@")
endif()
find_dependency(MPI 2.0 REQUIRED)

find_dependency(Threads REQUIRED)
find_dependency(fmt REQUIRED)
find_dependency(spdlog REQUIRED)
find_dependency(small_vector REQUIRED)
find_dependency(libenvpp REQUIRED)
if(@CELERITY_USE_MIMALLOC@)
  find_dependency(mimalloc REQUIRED)
endif()
if(@CELERITY_ENABLE_CUDA_BACKEND@)
  if(CMAKE_VERSION VERSION_GREATER_EQUAL "3.17")
    find_dependency(CUDAToolkit REQUIRED)
  else()
    find_dependency(CUDA REQUIRED)
  endif()
endif()

if(CELERITY_SYCL_IMPL STREQUAL "hipSYCL")
  if(NOT DEFINED HIPSYCL_TARGETS AND NOT "@HIPSYCL_TARGETS@" STREQUAL "")
    set(HIPSYCL_TARGETS "@HIPSYCL_TARGETS@")
  endif()
  if(NOT DEFINED hipSYCL_DIR)
    find_dependency(hipSYCL CONFIG REQUIRED PATHS "@hipSYCL_DIR@")
  else()
    find_dependency(hipSYCL CONFIG REQUIRED)
  endif()
elseif(CELERITY_SYCL_IMPL STREQUAL "DPC++")
  include("${CELERITY_CMAKE_DIR}/TestDPCXX.cmake")
  test_cxx_compiler_is_dpcpp(CXX_COMPILER_IS_DPCPP)
  if(NOT CXX_COMPILER_IS_DPCPP)
    message(SEND_ERROR "Celerity was built against DPC++, but CMAKE_CXX_COMPILER does not point to DPC++")
  endif()
endif()

set(CELERITY_FEATURE_SCALAR_REDUCTIONS "@CELERITY_FEATURE_SCALAR_REDUCTIONS@")
set(CELERITY_FEATURE_SIMPLE_SCALAR_REDUCTIONS "@CELERITY_FEATURE_SIMPLE_SCALAR_REDUCTIONS@")
set(CELERITY_FEATURE_LOCAL_ACCESSOR "@CELERITY_FEATURE_LOCAL_ACCESSOR@")
set(CELERITY_FEATURE_UNNAMED_KERNELS "@CELERITY_FEATURE_UNNAMED_KERNELS@")
set(CELERITY_DETAIL_HAS_NAMED_THREADS "@CELERITY_DETAIL_HAS_NAMED_THREADS@")
set(CELERITY_ACCESSOR_BOUNDARY_CHECK "@CELERITY_ACCESSOR_BOUNDARY_CHECK@")
set(CELERITY_ACCESS_PATTERN_DIAGNOSTICS "@CELERITY_ACCESS_PATTERN_DIAGNOSTICS@")

include("${CMAKE_CURRENT_LIST_DIR}/celerity-targets.cmake")

# We currently assume that only a single Celerity configuration is installed at a time.
# Unfortunately CMake doesn't remove old configurations when re-installing a target,
# so we advise to do a clean install (although it would suffice to just remove the
# configuration-specific target files).
# NOTE: This assumption is required for the CELERITY_DETAIL_ENABLE_DEBUG mechanism below.
get_target_property(
  CELERITY_IMPORTED_CONFIGS
  Celerity::celerity_runtime
  IMPORTED_CONFIGURATIONS
)
list(LENGTH CELERITY_IMPORTED_CONFIGS CELERITY_CONFIG_COUNT)
if(CELERITY_CONFIG_COUNT GREATER 1)
  message(FATAL_ERROR "More than one Celerity build configuration was found: "
    "${CELERITY_IMPORTED_CONFIGS}. This is currently unsupported. "
    "Perform a clean installation to remedy this.")
endif()
unset(CELERITY_CONFIG_COUNT)

# Set the CELERITY_DETAIL_ENABLE_DEBUG preprocessor flag if the imported target
# was built with the debug configuration. This flag is also set during the library
# build itself, see the respective CMakeLists.txt.
#
# If the requirement on having only a single configuration is to be lifted, we also
# have to take MAP_IMPORTED_CONFIG_DEBUG into account to figure out which configuration
# will be linked to the user target.
if("DEBUG" IN_LIST CELERITY_IMPORTED_CONFIGS)
  target_compile_definitions(
    Celerity::celerity_runtime INTERFACE
    CELERITY_DETAIL_ENABLE_DEBUG
  )
endif()
unset(CELERITY_IMPORTED_CONFIGS)

set(CMAKE_MODULE_PATH "${CELERITY_ORIGINAL_CMAKE_MODULE_PATH}")
