name: Celerity CI

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  find-duplicate-workflows:
    runs-on: self-hosted
    outputs:
      should_skip: ${{ steps.skip-check.outputs.should_skip }}
    steps:
      - id: skip-check
        uses: fkirc/skip-duplicate-actions@v3.4.1
        with:
          concurrent_skipping: 'same_content_newer'
          skip_after_successful_duplicate: 'true'
          paths_ignore: '["**/*.md", "docs/**", "website/**"]'
          do_not_skip: '["workflow_dispatch", "schedule"]'
          cancel_others: 'true'

  build-and-test:
    needs: find-duplicate-workflows
    if: ${{ needs.find-duplicate-workflows.outputs.should_skip != 'true' }}
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - sycl: "computecpp"
            sycl-version: "2.6.0"
            ubuntu-version: "20.04"
            platform: "intel"
            build-type: "Debug"
          - sycl: "computecpp"
            sycl-version: "2.7.0"
            ubuntu-version: "20.04"
            platform: "intel"
            build-type: "Debug"
          - sycl: "computecpp"
            sycl-version: "2.8.0"
            ubuntu-version: "20.04"
            platform: "intel"
            build-type: "Debug"
          - sycl: "computecpp"
            sycl-version: "2.9.0"
            ubuntu-version: "22.04"
            platform: "intel"
            build-type: "Debug"
          - sycl: "computecpp"
            sycl-version: "2.9.0"
            ubuntu-version: "22.04"
            platform: "intel"
            build-type: "Release"
          - sycl: "computecpp"
            sycl-version: "2.9.0-experimental"
            ubuntu-version: "22.04"
            platform: "intel"
            build-type: "Debug"
          - sycl: "computecpp"
            sycl-version: "2.9.0-experimental"
            ubuntu-version: "22.04"
            platform: "intel"
            build-type: "Release"
          - sycl: "dpcpp"
            sycl-version: "7735139b"
            ubuntu-version: "20.04"
            platform: "intel"
            build-type: "Debug"
          - sycl: "dpcpp"
            sycl-version: "HEAD"
            ubuntu-version: "22.04"
            platform: "intel"
            build-type: "Debug"
          - sycl: "dpcpp"
            sycl-version: "HEAD"
            ubuntu-version: "22.04"
            platform: "intel"
            build-type: "Release"
          - sycl: "hipsycl"
            sycl-version: "7b00e2ef"
            ubuntu-version: "20.04"
            platform: "nvidia"
            build-type: "Debug"
          - sycl: "hipsycl"
            sycl-version: "HEAD"
            ubuntu-version: "22.04"
            platform: "nvidia"
            build-type: "Debug"
          - sycl: "hipsycl"
            sycl-version: "HEAD"
            ubuntu-version: "22.04"
            platform: "nvidia"
            build-type: "Release"

    env:
      build-name: ${{ matrix.platform }}-ubuntu${{ matrix.ubuntu-version }}-${{ matrix.sycl }}-${{ matrix.sycl-version }}-${{ matrix.build-type }}
      container-workspace: /__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}
      build-dir: /root/build
      examples-build-dir: /root/build-examples
    container:
      image: celerity-build/${{ matrix.sycl }}:ubuntu${{ matrix.ubuntu-version }}-${{ matrix.sycl-version }}
      volumes:
        - ccache:/ccache
    steps:
      - name: Print exact SYCL revision used for this CI run
        run: cat /VERSION
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Build and install Celerity
        run: bash -o pipefail -c "bash /root/build-celerity.sh ${{ env.container-workspace }} --build-type ${{ matrix.build-type }} --target install 2>&1 | tee ${{ env.build-name }}.log"
      # Upload build log for report step
      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.build-name }}
          path: ${{ env.build-name }}.log
      - name: Build examples against installed Celerity
        run: bash /root/build-examples.sh ${{ env.container-workspace }}/examples --build-type ${{ matrix.build-type }}
      - name: Run unit tests
        timeout-minutes: 5
        working-directory: ${{ env.build-dir }}
        run: ${{ env.container-workspace }}/ci/run-unit-tests.sh
      - name: Run integration tests
        timeout-minutes: 5
        # We build examples twice, but only run the installed version (which probably has more failure modes)
        working-directory: ${{ env.examples-build-dir }}
        run: ${{ env.container-workspace }}/ci/run-integration-tests.sh /data/Lenna.png 1 2 4
      - name: Run system tests
        working-directory: ${{ env.build-dir }}
        run: ${{ env.container-workspace }}/ci/run-system-tests.sh 2 4
      - name: Upload stack traces (if any)
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.build-name }}
          path: |
            ${{ env.build-dir }}/*.trace
            ${{ env.examples-build-dir }}/*.trace
          if-no-files-found: ignore

  report:
    needs: [find-duplicate-workflows, build-and-test]
    if: ${{ needs.find-duplicate-workflows.outputs.should_skip != 'true' }}
    runs-on: self-hosted
    env:
      container-workspace: /__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}
    container:
      image: celerity-lint
    steps:
      - uses: actions/checkout@v2
      - name: Check code formatting
        id: formatting
        working-directory: ${{ env.container-workspace }}
        shell: bash
        run: |
          unformatted=$("./ci/find-unformatted-files.sh")
          unformatted=${unformatted//$'\n'/'%0A'}
          echo "::set-output name=unformatted-files::$unformatted"
      - uses: "celerity/ci-report-action@v6"
        with:
          gh-token: ${{ secrets.GITHUB_TOKEN }}
          unformatted-files: ${{ steps.formatting.outputs.unformatted-files }}
