name: Celerity CI

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - sycl-version: "computecpp:2.6.0"
            platform: "intel"
            build-type: "Debug"
          - sycl-version: "computecpp:2.6.0"
            platform: "intel"
            build-type: "Release"
          - sycl-version: "hipsycl:HEAD"
            platform: "nvidia"
            build-type: "Debug"
          - sycl-version: "hipsycl:HEAD"
            platform: "nvidia"
            build-type: "Release"
          - sycl-version: "hipsycl:7b00e2ef"
            platform: "nvidia"
            build-type: "Debug"
          - sycl-version: "hipsycl:7b00e2ef"
            platform: "nvidia"
            build-type: "Release"
          - sycl-version: "dpcpp:HEAD"
            platform: "intel"
            build-type: "Debug"
          - sycl-version: "dpcpp:HEAD"
            platform: "intel"
            build-type: "Release"
          - sycl-version: "dpcpp:7735139b"
            platform: "intel"
            build-type: "Debug"
          - sycl-version: "dpcpp:7735139b"
            platform: "intel"
            build-type: "Release"

    env:
      build-name: ${{ matrix.platform }}-${{ matrix.sycl-version }}-${{ matrix.build-type }}
      container-workspace: /__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}
      build-dir: /root/build
      examples-build-dir: /root/build-examples
    container:
      image: build/celerity/${{ matrix.sycl-version }}
      volumes:
        - ccache:/ccache
    steps:
      - name: Print exact SYCL revision used for this CI run
        run: cat /VERSION
      # The build name may not contain colons (this is not allowed for artifacts)
      # Since GitHub does not provide a built-in string replacement function, we use a bashism
      - name: Sanitize build name
        shell: bash
        run: echo "build-name=${unsanitized/:/-}" >> $GITHUB_ENV
        env:
          unsanitized: ${{ env.build-name }}
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Build and install Celerity
        run: bash -o pipefail -c "bash /root/build-celerity.sh ${{ env.container-workspace }} --build-type ${{ matrix.build-type }} --target install 2>&1 | tee ${{ env.build-name }}.log"
      # Upload build log for report step
      - name: Upload build logs
        uses: actions/upload-artifact@v1
        with:
          name: ${{ env.build-name }}
          path: ${{ env.build-name }}.log
      - name: Build examples against installed Celerity
        run: bash /root/build-examples.sh ${{ env.container-workspace }}/examples --build-type ${{ matrix.build-type }}
      - name: Run unit tests
        timeout-minutes: 5
        working-directory: ${{ env.build-dir }}
        # Running "make test" is slow (why?), so we just call all test executables manually
        run: find test -maxdepth 1 -executable -type f -print0 | xargs -0 -n1 bash -c
      - name: Run integration tests
        timeout-minutes: 5
        # We build examples twice, but only run the installed version (which probably has more failure modes)
        working-directory: ${{ env.examples-build-dir }}
        run: ${{ env.container-workspace }}/ci/run-integration-tests.sh /data/Lenna.png 1 2 4
      - name: Run system tests
        working-directory: ${{ env.build-dir }}
        run: ${{ env.container-workspace }}/ci/run-system-tests.sh 2 4

  report:
    needs: [build-and-test]
    runs-on: self-hosted
    env:
      container-workspace: /__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}
    container:
      image: celerity-lint
    steps:
      - uses: actions/checkout@v2
      - name: Check code formatting
        id: formatting
        working-directory: ${{ env.container-workspace }}
        shell: bash
        run: |
          unformatted=$("./ci/find-unformatted-files.sh")
          unformatted=${unformatted//$'\n'/'%0A'}
          echo "::set-output name=unformatted-files::$unformatted"
      - uses: "celerity/ci-report-action@v6"
        with:
          gh-token: ${{ secrets.GITHUB_TOKEN }}
          unformatted-files: ${{ steps.formatting.outputs.unformatted-files }}
